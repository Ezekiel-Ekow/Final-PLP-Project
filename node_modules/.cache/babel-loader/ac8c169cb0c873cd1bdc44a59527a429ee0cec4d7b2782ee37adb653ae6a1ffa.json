{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\H\\\\Desktop\\\\PLP Project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CalculatorForm from \"./components/CalculatorForm\";\nimport ResultCard from \"./components/ResultCard\";\nimport \"./App.css\"; // Import custom styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [result, setResult] = useState(null);\n  const handleCalculate = async (medication, weight) => {\n    try {\n      const response = await fetch(\"http://localhost:5000/calculate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          medication,\n          weight\n        })\n      });\n      const data = await response.json();\n      setResult(data);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      alert(\"Failed to calculate dose. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Pediatric Dose Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculator-container\",\n      children: /*#__PURE__*/_jsxDEV(CalculatorForm, {\n        onCalculate: handleCalculate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: /*#__PURE__*/_jsxDEV(ResultCard, {\n        result: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"X4bz0btR6WTE+CkTerVmRyY/5iQ=\");\n_c = App;\nexport default App;\nconst handleCalculate = async (medication, weight) => {\n  try {\n    const response = await fetch(\"http://127.0.0.1:5000/calculate\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        medication,\n        weight\n      })\n    });\n    const data = await response.json();\n    console.log(\"API Response:\", data); // Log the response\n\n    if (!response.ok) {\n      throw new Error(data.error || \"Failed to calculate dose\");\n    }\n    setResult(data); // Update the result state\n    console.log(\"Updated Result State:\", data); // Log the updated state\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    alert(error.message);\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CalculatorForm","ResultCard","jsxDEV","_jsxDEV","App","_s","result","setResult","handleCalculate","medication","weight","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","_c","log","ok","Error","message","$RefreshReg$"],"sources":["C:/Users/H/Desktop/PLP Project/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport CalculatorForm from \"./components/CalculatorForm\";\r\nimport ResultCard from \"./components/ResultCard\";\r\nimport \"./App.css\"; // Import custom styles\r\n\r\nconst App = () => {\r\n  const [result, setResult] = useState(null);\r\n\r\n  const handleCalculate = async (medication, weight) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/calculate\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ medication, weight }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      setResult(data);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      alert(\"Failed to calculate dose. Please try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <h1 className=\"app-title\">Pediatric Dose Calculator</h1>\r\n      <div className=\"calculator-container\">\r\n        <CalculatorForm onCalculate={handleCalculate} />\r\n      </div>\r\n      {result && (\r\n        <div className=\"result-container\">\r\n          <ResultCard result={result} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\nconst handleCalculate = async (medication, weight) => {\r\n  try {\r\n    const response = await fetch(\"http://127.0.0.1:5000/calculate\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ medication, weight }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(\"API Response:\", data); // Log the response\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error || \"Failed to calculate dose\");\r\n    }\r\n\r\n    setResult(data); // Update the result state\r\n    console.log(\"Updated Result State:\", data); // Log the updated state\r\n  } catch (error) {\r\n    console.error(\"Error:\", error.message);\r\n    alert(error.message);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}